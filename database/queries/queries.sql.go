// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package queries

import (
	"context"
)

const deleteWelcome = `-- name: DeleteWelcome :exec
DELETE FROM welcomes WHERE guild_id = $1
`

func (q *Queries) DeleteWelcome(ctx context.Context, guildID string) error {
	_, err := q.db.ExecContext(ctx, deleteWelcome, guildID)
	return err
}

const getV = `-- name: GetV :one
SELECT v FROM kv_pairs WHERE k = $1
`

func (q *Queries) GetV(ctx context.Context, k string) (string, error) {
	row := q.db.QueryRowContext(ctx, getV, k)
	var v string
	err := row.Scan(&v)
	return v, err
}

const getWelcome = `-- name: GetWelcome :one
SELECT guild_id, channel_id, message_type, message_text, image_name, image_title, image_subtitle FROM welcomes WHERE guild_id = $1
`

func (q *Queries) GetWelcome(ctx context.Context, guildID string) (Welcome, error) {
	row := q.db.QueryRowContext(ctx, getWelcome, guildID)
	var i Welcome
	err := row.Scan(
		&i.GuildID,
		&i.ChannelID,
		&i.MessageType,
		&i.MessageText,
		&i.ImageName,
		&i.ImageTitle,
		&i.ImageSubtitle,
	)
	return i, err
}

const insertWelcome = `-- name: InsertWelcome :exec
INSERT INTO welcomes (guild_id, channel_id, message_type, message_text, image_name, image_title, image_subtitle)
	VALUES ($1, $2, $3, $4, $5, $6, $7)
	ON CONFLICT (guild_id) DO NOTHING
`

type InsertWelcomeParams struct {
	GuildID       string
	ChannelID     string
	MessageType   string
	MessageText   string
	ImageName     string
	ImageTitle    string
	ImageSubtitle string
}

func (q *Queries) InsertWelcome(ctx context.Context, arg InsertWelcomeParams) error {
	_, err := q.db.ExecContext(ctx, insertWelcome,
		arg.GuildID,
		arg.ChannelID,
		arg.MessageType,
		arg.MessageText,
		arg.ImageName,
		arg.ImageTitle,
		arg.ImageSubtitle,
	)
	return err
}

const setWelcomeChannel = `-- name: SetWelcomeChannel :exec
UPDATE welcomes SET channel_id = $1 WHERE guild_id = $2
`

type SetWelcomeChannelParams struct {
	ChannelID string
	GuildID   string
}

func (q *Queries) SetWelcomeChannel(ctx context.Context, arg SetWelcomeChannelParams) error {
	_, err := q.db.ExecContext(ctx, setWelcomeChannel, arg.ChannelID, arg.GuildID)
	return err
}

const setWelcomeImageName = `-- name: SetWelcomeImageName :exec
UPDATE welcomes SET image_name = $1 WHERE guild_id = $2
`

type SetWelcomeImageNameParams struct {
	ImageName string
	GuildID   string
}

func (q *Queries) SetWelcomeImageName(ctx context.Context, arg SetWelcomeImageNameParams) error {
	_, err := q.db.ExecContext(ctx, setWelcomeImageName, arg.ImageName, arg.GuildID)
	return err
}

const setWelcomeImageSubtitle = `-- name: SetWelcomeImageSubtitle :exec
UPDATE welcomes SET image_subtitle = $1 WHERE guild_id = $2
`

type SetWelcomeImageSubtitleParams struct {
	ImageSubtitle string
	GuildID       string
}

func (q *Queries) SetWelcomeImageSubtitle(ctx context.Context, arg SetWelcomeImageSubtitleParams) error {
	_, err := q.db.ExecContext(ctx, setWelcomeImageSubtitle, arg.ImageSubtitle, arg.GuildID)
	return err
}

const setWelcomeImageTitle = `-- name: SetWelcomeImageTitle :exec
UPDATE welcomes SET image_title = $1 WHERE guild_id = $2
`

type SetWelcomeImageTitleParams struct {
	ImageTitle string
	GuildID    string
}

func (q *Queries) SetWelcomeImageTitle(ctx context.Context, arg SetWelcomeImageTitleParams) error {
	_, err := q.db.ExecContext(ctx, setWelcomeImageTitle, arg.ImageTitle, arg.GuildID)
	return err
}

const setWelcomeMessageText = `-- name: SetWelcomeMessageText :exec
UPDATE welcomes SET message_text = $1 WHERE guild_id = $2
`

type SetWelcomeMessageTextParams struct {
	MessageText string
	GuildID     string
}

func (q *Queries) SetWelcomeMessageText(ctx context.Context, arg SetWelcomeMessageTextParams) error {
	_, err := q.db.ExecContext(ctx, setWelcomeMessageText, arg.MessageText, arg.GuildID)
	return err
}

const setWelcomeMessageType = `-- name: SetWelcomeMessageType :exec
UPDATE welcomes SET message_type = $1 WHERE guild_id = $2
`

type SetWelcomeMessageTypeParams struct {
	MessageType string
	GuildID     string
}

func (q *Queries) SetWelcomeMessageType(ctx context.Context, arg SetWelcomeMessageTypeParams) error {
	_, err := q.db.ExecContext(ctx, setWelcomeMessageType, arg.MessageType, arg.GuildID)
	return err
}

const upsertKV = `-- name: UpsertKV :exec
INSERT INTO kv_pairs (k, v)
	VALUES ($1, $2)
	ON CONFLICT (k) DO UPDATE
	SET v = $2
`

type UpsertKVParams struct {
	K string
	V string
}

func (q *Queries) UpsertKV(ctx context.Context, arg UpsertKVParams) error {
	_, err := q.db.ExecContext(ctx, upsertKV, arg.K, arg.V)
	return err
}
